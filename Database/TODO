(Zane) Currently the importDatabase.php script must be ran from
    the command line. This is not very useful for programmers
    who simply want to import and invoke a function from their 
    own script. Most of importDatabase.php (the part that does
    not parse the command line) can be abstracted to a function
    accepting the interpreted command line arguments. The new
    file can be called importDatabaseFunctions.php. Then, the
    importDatabase.php script will simply call this function
    with the parsed command line.
(2) Currently the exportDatabase.php script must be ran from
    the command line. This is not very useful for programmers
    who simply want to import and invoke a function from their 
    own script. Most of exportDatabase.php (the part that does
    not parse the command line) can be abstracted to a function
    accepting the interpreted command line arguments. The new
    file can be called exportDatabaseFunctions.php. Then, the
    exportDatabase.php script will simply call this function
    with the parsed command line.

(3 - depends on 1 being done)
	Seperate the importDatabase function into two functions:
		importOldDatabase() -- which is identical to the
		current importDatabase() function
		
		importDatabase() -- which will skip running the
		convert.py script and will simply add the data in
		the .csv file to the database.

(4 - depends on 3 being done)
	importDatabase() -- change this function to be able to
	handle altered column structure, if that is even possible.

	I think just adding the "new" columns to the end of the 
	table and adding the data that she puts in that column
	as a varchar is probably the best we can do.

---------------STUFF THAT'S DONE---------------------------
(DONE) Have convert.py output a file named TableNames
    which contains the name of a table with a corresponding
    .csv file for each file generated by the convert.py
    script. 

    The importDatabase.php script should then read in the
    names of the tables into the $tableNames array by
    parsing the TableNames file.
    
    This way, should convert.py change to create
    more (or less) or differently named tables, the 
    importDatabase.php script will not have to be edited
    in any way.
